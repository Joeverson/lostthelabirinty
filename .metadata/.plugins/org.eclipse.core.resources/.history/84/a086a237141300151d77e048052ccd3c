package controllers;

import java.awt.List;
import java.util.Random;

import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.DEFAULT;

import models.ObjectLabirinty;
import models.Warrior;
import models.wall;


public class GenerateLabirinty {
	private static ObjectLabirinty[][] labirinties;
	//nivel de labirinto -- tamando do quadrado
	private static int lvLabirinty;
	
	//localização do guerreiro
	private static int[] locationWarrior = new int[2];
	
	private static String warrior = "maria";
	
	//lista de comandos
	private static final String[] commandsSteps = {"left","right","top","bottom","leftTop","rightTop","bottomTop","bottomTop"}; 
	
	
	public GenerateLabirinty() {}
	
	//metodo para gerar o labirinto
	public static void generate(int i){
		lvLabirinty = i;
		labirinties = new ObjectLabirinty[i][i];
		
		for(int k = 0; k < i; k++){			
			for(int j = 0; j < i; j++){
				labirinties[k][j] = new ObjectLabirinty();
			}
		}
		
		// gerando paredes
		addWall();
		
		// adiciona o jogador
		addWarrior(warrior);
	}
	
	
	//adicionar paredes
	public static void addWall(){
		int quantWallForLines = lvLabirinty/2;		
		Random rnd = new Random();
		
		for(int k = 0; k < lvLabirinty; k++){			
			for(int j = 0; j < quantWallForLines; j++){
				labirinties[k][rnd.nextInt(quantWallForLines)].setContaint(new wall());
			}
		}
		
	}
	
	//colocar player no jogo
	public static void addWarrior(String name){
		Random rnd = new Random();
		int x;
		int y;
		
		while(true){
			x = rnd.nextInt(lvLabirinty);
			y = rnd.nextInt(lvLabirinty);
			
			if(labirinties[x][y].getContaint() == null){
				labirinties[x][y].setContaint(new Warrior(x,y,name));
				
				//guardando localização de guerreiro
				locationWarrior[1] = x;
				locationWarrior[0] = y;
				
				break;
			}
		}
	}
	
	// para testes de visualizações
	public static void viewLab(){		
		for(int k = 0; k < lvLabirinty; k++){			
			for(int j = 0; j < lvLabirinty; j++){				
				if( (wall) labirinties[k][j].getContaint() != null){
					System.out.println(((wall) labirinties[k][j].getContaint()).msg());
				}
				
			}
		}
	}
	
	
	//chamada de acçoes de passos
	public static void steps(String steps){
		switch(steps){
			case "left":
				goLeft();
				break;
			default:
				System.out.println("Comando invalido! \n de um dos seguintes comandos:\n\n");
			    for(int h = 0; h < commandsSteps.length; h++){
			    	System.out.println(" \t- "+commandsSteps[h]+"\n");
			    }
		}
	}
	
	
	// funções de navegação
	
	//left
	private static void goLeft(){
		Warrior w = (Warrior) labirinties[locationWarrior[0]][locationWarrior[1]].getContaint();
		int x = locationWarrior[0];
		int y = locationWarrior[1];
		
		if(labirinties[(x-1)][y].getContaint() == null){
			labirinties[x-1][y].setContaint(w);
			System.out.println("andou para a esquerda! x="+x);
			locationWarrior[0] = x;
		}else{
			((wall) labirinties[x-1][y].getContaint()).msg();
		}
	}

}
